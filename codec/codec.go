package codec

import (
	"bytes"
	"encoding/gob"
	"encoding/json"

	jsoniter "github.com/json-iterator/go"
	"github.com/pkg/errors"
)

var (
	jsoniterJSON = jsoniter.ConfigFastest

	// ErrCodecNotMatch is returned if the object cannot fulfill the chosen codec
	ErrCodecNotMatch = errors.New("cache:codec: not match this codec type")
	// ErrCodecNotSupported is returned if the chosen codec is not supported
	ErrCodecNotSupported = errors.New("cache:codec: not support this codec type")
)

// Type is the codec type
type Type int

// The list of possible codec types
const (
	JSON     Type = 0 // Marshal/unmarshal using `encoding/json`. Default codec type.
	Jsoniter Type = 1 // Marshal/unmarshal using Jsoniter (configured to use `jsoniter.ConfigFastest`)
	Gob      Type = 2 // Marshal/unmarshal using `encoding/gob`

	// Marshal/Unmarshal using the Marshal/Unmarshal method from the object itself, the `value` and `receiver` object need to implement the `MarshalUnmarshaler` interface
	// aiming for better performance, one usage scenario is for PB message object generated by `gogo/protobuf`
	ObjectBuiltInMarshalUnmarshal Type = 3
)

// UnsetCodec is the codec type default value for cache option
const UnsetCodec = Type(-1)

// Validate validates if a codec type is in valid codec type range
func (ct Type) Validate() bool {
	return ct >= JSON && ct <= ObjectBuiltInMarshalUnmarshal
}

var codecTypeStringMapping = []string{
	"JSON",
	"Jsoniter",
	"Gob",
	"ObjectBuiltIn",
}

func (ct Type) String() string {
	if ct < JSON || ct > ObjectBuiltInMarshalUnmarshal {
		return "Unknown"
	}
	return codecTypeStringMapping[ct]
}

// CustomCodec defines `Marshal` and `Unmarshal`
type CustomCodec interface {
	Marshal(value interface{}) ([]byte, error)
	Unmarshal(b []byte, dst interface{}) error
}

// MarshalUnmarshaler defines `Marshal` and `Unmarshal` methods an object needs to have to use `ObjectBuiltInMarshalUnmarshal`
type MarshalUnmarshaler interface {
	Marshal() (b []byte, err error)
	Unmarshal(b []byte) error
}

// Codec is the struct to configure the behavior of codec
type Codec struct {
	typ              Type
	customCodec      CustomCodec
	withOptimization bool
}

// CodecType returns current codec type
func (c Codec) CodecType() Type {
	return c.typ
}

// CustomCodec returns current custom codec
func (c Codec) CustomCodec() CustomCodec {
	return c.customCodec
}

// WithOptimization returns current with optimization value
func (c Codec) WithOptimization() bool {
	return c.withOptimization
}

// Marshal returns a []byte representing the passed value
func Marshal(value interface{}, codecType Type) ([]byte, error) {
	return marshal(value, codecType)
}

// nolint: funlen
func marshal(value interface{}, codecType Type) ([]byte, error) {
	var byt []byte
	var err error

	switch codecType {
	case ObjectBuiltInMarshalUnmarshal:
		if customizeObj, ok := value.(MarshalUnmarshaler); ok {
			byt, err = customizeObj.Marshal()
			if err != nil {
				return nil, err
			}
			return byt, nil
		}

		return nil, ErrCodecNotMatch
	case Gob:
		var b bytes.Buffer
		encoder := gob.NewEncoder(&b)
		err = encoder.Encode(value)
		if err != nil {
			return nil, err
		}

		byt = b.Bytes()
		return byt, nil
	case Jsoniter:
		return jsoniterJSON.Marshal(value)
	case JSON:
		// default json
		return json.Marshal(value)
	}

	return nil, ErrCodecNotSupported
}

// Unmarshal unmarshals the passed []byte into a the passed ptr interface{}
func Unmarshal(byt []byte, receiver interface{}, codecType Type) (err error) {
	return unmarshal(byt, receiver, codecType)
}

func unmarshal(byt []byte, receiver interface{}, codecType Type) (err error) {
	switch codecType {
	case ObjectBuiltInMarshalUnmarshal:
		if customizeObj, ok := receiver.(MarshalUnmarshaler); ok {
			err = customizeObj.Unmarshal(byt)
			return err
		}
		return ErrCodecNotMatch
	case Gob:
		b := bytes.NewBuffer(byt)
		decoder := gob.NewDecoder(b)

		return decoder.Decode(receiver)
	case Jsoniter:
		return jsoniterJSON.Unmarshal(byt, receiver)
	case JSON:
		// default json
		return json.Unmarshal(byt, receiver)
	}

	return ErrCodecNotSupported
}
